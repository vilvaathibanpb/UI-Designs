{"version":3,"sources":["../../lib/me.settings.password.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAM,OAAO,wBAAb;;IAEqB,kB;;AAEpB;;;;;;AAMA,6BAAa,KAAb,EAAqB;AAAA;;AACpB,MAAK,EAAI,gBAAgB,kBAApB,CAAL,EAAgD;AAC/C,UAAO,IAAI,kBAAJ,CAAwB,KAAxB,CAAP;AACA;AACD,OAAK,KAAL,GAAa,KAAb;AACA;;AAED;;;;;;;;;;;;2BAQU,Q,EAAU,K,EAAO,E,EAAK;AAC/B,UAAO,KAAK,KAAL,CAAW,GAAX,CAAe,IAAf,CAAqB,OAAO,UAA5B,EAAwC,KAAxC,EAA+C,EAAE,UAAU,QAAZ,EAA/C,EAAuE,EAAvE,CAAP;AACA;;;;;kBAzBmB,kB","file":"me.settings.password.js","sourcesContent":["const root = '/me/settings/password/';\n\nexport default class MeSettingsPassword {\n\n\t/**\n\t * `MeSettingsPassword` constructor.\n\t *\n\t * @param {WPCOM} wpcom - wpcom instance\n\t * @return {Null} null\n\t */\n\tconstructor( wpcom ) {\n\t\tif ( ! ( this instanceof MeSettingsPassword ) ) {\n\t\t\treturn new MeSettingsPassword( wpcom );\n\t\t}\n\t\tthis.wpcom = wpcom;\n\t}\n\n\t/**\n\t * Verify strength of a user's new password.\n\t *\n\t * @param {String} password - the users's potential new password\n\t * @param {Object} [query] - query object parameter\n\t * @param {Function} fn - callback function\n\t * @return {Function} request handler\n\t */\n\tvalidate( password, query, fn ) {\n\t\treturn this.wpcom.req.post( root + 'validate', query, { password: password }, fn );\n\t}\n}\n"]}