{"version":3,"sources":["../../lib/me.keyring-connection.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAM,OAAO,0BAAb;;IAEqB,iB;;AAEpB;;;;;;;AAOA,4BAAa,KAAb,EAAoB,KAApB,EAA4B;AAAA;;AAC3B,MAAK,EAAI,gBAAgB,iBAApB,CAAL,EAA+C;AAC9C,UAAO,IAAI,iBAAJ,CAAuB,KAAvB,EAA8B,KAA9B,CAAP;AACA;AACD,OAAK,GAAL,GAAW,KAAX;AACA,OAAK,KAAL,GAAa,KAAb;AACA;;AAED;;;;;;;;;;;sBAOK,K,EAAO,E,EAAK;AAChB,UAAO,KAAK,KAAL,CAAW,GAAX,CAAe,GAAf,CAAoB,OAAO,KAAK,GAAhC,EAAqC,KAArC,EAA4C,EAA5C,CAAP;AACA;;AAED;;;;;;;;;;;0BAQQ,K,EAAO,E,EAAK;AACnB,UAAO,KAAK,KAAL,CAAW,GAAX,CAAe,GAAf,CAAoB,OAAO,KAAK,GAAZ,GAAkB,SAAtC,EAAiD,KAAjD,EAAwD,EAAxD,CAAP;AACA;;;;;kBAtCmB,iB","file":"me.keyring-connection.js","sourcesContent":["const root = '/me/keyring-connections/';\n\nexport default class KeyringConnection {\n\n\t/**\n\t * `KeyringConnection` constructor.\n\t *\n\t * @param {String} keyId - the connection ID to take action on.\n\t * @param {WPCOM} wpcom - wpcom instance\n\t * @return {Null} null\n\t */\n\tconstructor( keyId, wpcom ) {\n\t\tif ( ! ( this instanceof KeyringConnection ) ) {\n\t\t\treturn new KeyringConnection( keyId, wpcom );\n\t\t}\n\t\tthis._id = keyId;\n\t\tthis.wpcom = wpcom;\n\t}\n\n\t/**\n\t * Get a single Keyring connection that the current user has setup.\n\t *\n\t * @param {Object} [query] - query object parameter\n\t * @param {Function} fn - callback function\n\t * @return {Function} request handler\n\t */\n\tget( query, fn ) {\n\t\treturn this.wpcom.req.get( root + this._id, query, fn );\n\t}\n\n\t/**\n\t * Delete the Keyring connection (and associated token) with the\n\t * provided ID. Also deletes all associated publicize connections.\n\t *\n\t * @param {Object} [query] - query object parameter\n\t * @param {Function} fn - callback function\n\t * @return {Function} request handler\n\t */\n\tdelete( query, fn ) {\n\t\treturn this.wpcom.req.del( root + this._id + '/delete', query, fn );\n\t}\n}\n"]}